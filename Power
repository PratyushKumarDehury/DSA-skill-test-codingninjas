Ninja is given an easy task. He has to implement a function which calculates a^b. But there is a small difference, b is an extremely large positive number given in the form of an array.
Note: Since answers can be huge, print answer mod 1337.
It is given that b will not contain leading zeros.
Input Format:
 First line of input contains an integer a
 Second line of input contains an integer n, representing the size of the array.
 Third line of input contains an array (space separated).
 
Constraints:
1 <= a <= 2^31 - 1
1 <= b.length <= 3 * 10^6
0 <= b[i] <= 9
Time Limit: 1 second

Output Format:
Single line of output printing a^b
Sample Input 1:
5
2
1 5
Sample Output:
944
Explanation:
5 to the power 15 is 30517578125. Its mod with 1337 is 944.









import java.util.Scanner;
public class Solution {


	 public static int P2(int a, int[] b){
       if(b == null || b.length == 0) return 0;
       if(a == 0 || a == 1) return a;
       //case i == 0
       int ans = P1(a, b[0]);
       //case i > 0
       for(int i=1;i<b.length;i++){
           int tmp = P1(a, b[i]);
           ans = (P1(ans, 10) * tmp) % 1337;
       }
       return ans;
   }

   private static int P1(int a, int pow){
       if(a > 1337) a %= 1337;
       int ans = 1;
       for(int i=0;i<pow;i++){
           ans *= a;
           if(ans > 1337) ans %= 1337;
       }
       return ans;
   }


	public static void main(String[] args) {
		/* Your class should be named Solution.
 			* Read input as specified in the question.
 			* Print output as specified in the question.
		*/

		// Write your code here

		Scanner s = new Scanner(System.in);
        
        int a =  s.nextInt();
        
        int n = s.nextInt();
        
        int b[] = new int[n];
        for(int i =0; i< n ; i++){
           b[i] = s.nextInt();
        }
        
        
        System.out.println(P2(a, b));
	}

}










